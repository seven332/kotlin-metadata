/*
 * Copyright 2018 Hippo Seven
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "kotlin"
apply plugin: "de.undercouch.download"

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${kotlin_version}"
    implementation "com.google.protobuf:protobuf-java:${protobuf_version}"
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}"
}

ext.system_platform = {
    String name = System.getProperty('os.name').toLowerCase()
    if (name.contains("linux") || name.contains("freebsd")) {
        name = "linux"
    } else if (name.contains("mac")) {
        name = "mac"
    } else if (name.contains('windows')) {
        name = "win"
    } else {
        throw new IllegalStateException("Unsupported platform: $it")
    }
    String arch = System.getProperty("os.arch")
    if (arch.contains("64")) {
        arch = "64"
    } else {
        arch = "32"
    }
    return "$name$arch"
}.call()

ext.protobuf_platform = {
    switch (system_platform) {
        case "linux32":
            return "linux-x86_32"
        case "linux64":
            return "linux-x86_64"
        case  "mac32":
            return "osx-x86_32"
        case "mac64":
            return "osx-x86_64"
        case "win32":
            return "win32"
        case "win64":
            return "win32"
        default:
            throw new IllegalStateException("Unsupported platform: $system_platform")
    }
}.call()

ext.protobuf_url = "https://github.com/google/protobuf/releases/download/v${protobuf_version}/protoc-${protobuf_version}-${protobuf_platform}.zip"

ext.protobuf_name = "protobuf-${protobuf_version}-${protobuf_platform}"

ext.protobuf_zip = "${rootProject.projectDir}/.gradle/protobuf/${protobuf_name}.zip"

ext.protobuf_folder = "${rootProject.projectDir}/.gradle/protobuf/${protobuf_name}"

ext.protobuf_bin = "${protobuf_folder}/bin/protoc"

ext.proto_path = "$projectDir/src/main/proto"

ext.proto_out = "$projectDir/src/main/java-gen"

task downloadProtobuf(type: Download) {
    src protobuf_url
    dest file(protobuf_zip)
    overwrite false
}

task installProtobuf(type: Copy, dependsOn: downloadProtobuf) {
    from zipTree(protobuf_zip)
    into file(protobuf_folder)
}

task execProtobuf(dependsOn: installProtobuf) {
    inputs.files {
        "$proto_path/metadata.proto"
        "$proto_path/builtins.proto"
    }

    outputs.files {
        "$proto_out/org/jetbrains/kotlin/metadata/ProtoBuf.java"
        "$proto_out/org/jetbrains/kotlin/metadata/builtins/BuiltInsProtoBuf.java"
    }

    doLast {
        // Protobuf can't create output dir
        File outDir = file(proto_out)
        if (!outDir.exists()) {
            outDir.mkdirs()
        }

        exec {
            workingDir = file(rootProject.projectDir)
            commandLine = [
                    protobuf_bin,
                    "$proto_path/metadata.proto",
                    "--java_out=$proto_out",
                    "--proto_path=$proto_path"
            ]
        }
        exec {
            workingDir = file(rootProject.projectDir)
            commandLine = [
                    protobuf_bin,
                    "$proto_path/builtins.proto",
                    "--java_out=$proto_out",
                    "--proto_path=$proto_path"
            ]
        }
    }
}

sourceSets.main.java.srcDir "src/main/java-gen"

compileJava.dependsOn execProtobuf

compileKotlin.dependsOn execProtobuf
